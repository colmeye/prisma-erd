#!/usr/bin/env node
(()=>{"use strict";const e=require("fs");function n(e){const n=e.match(/(\w+)\s+(\S+)(?:\s+(.*))?/);if(!n)throw new Error("No field data found");const[t,o,s,r]=n,i=s.endsWith("[]"),c=s.endsWith("?")||s.endsWith("[]"),a=s.replace("?","").replace("[]","");let l,f;try{const n=function(e){const n=e.match(/fields:\s*\[(\w+(?:,\s*\w+)*)\]/);if(!n)throw new Error("Fields not found in relationship");const t=e.match(/references:\s*\[(\w+(?:,\s*\w+)*)\]/);if(!t)throw new Error("References not found in relationship");return{fields:n[1].split(", "),references:t[1].split(", ")}}(e);l=n.fields,f=n.references}catch(e){}return{name:o,optional:c,other:r,type:a,otherModel:a,fields:l,references:f,hasMany:i}}class t{name;fieldInfo=[];relationshipInfo=[];constructor(e){this.name=function(e){const n=e.match(/^model\s+(\w+)\s*{/);if(!n)throw new Error("Model has no name?");return n[1]}(e);const t=function(e){const n=e.match(/{([\s\S]+?)}/);if(n)return n[1]}(e)??"",o=t.split("\n");for(const e of o)try{const{name:t,optional:o,other:s,type:r,otherModel:i,fields:c,references:a,hasMany:l}=n(e);i&&c&&a?this.relationshipInfo.push({fields:c,hasMany:l,optional:o,otherModel:i,references:a,verb:t}):this.fieldInfo.push({hasMany:l,name:t,optional:o,other:s,type:r})}catch(e){continue}}}function o(e){let n=`${e.name} {\n`;for(const t of Object.values(e.fieldInfo))n+=`\t${t.type} ${t.name}\n`;return n+="}\n",n}2===process.argv.length&&(console.error("Expected at least one argument!"),process.exit(1));const s=process.argv[2],r=process.argv[3]??"./",i=e.readFileSync(s).toString().match(/model\s+\w+\s+\{[\s\S]*?\}/g);if(!i)throw new Error("No models found in schema.prisma file");const c={};for(const e of i){const n=new t(e);c[n.name]=n}let a="erDiagram\n";for(const e in c){const n=c[e];a+=o(n);for(const e of n.relationshipInfo){const t=c[e.otherModel];if(!t)continue;const o=t.fieldInfo.find((e=>e.type===n.name));if(!o)continue;const s=e.hasMany?"{":"|",r=e.optional?"o":"|",i=`${o.hasMany?"}":"|"}${o.optional?"o":"|"}--${r}${s}`;a+=`${n.name} ${i} ${e.otherModel} : ${e.verb}\n`}}!function(n,t){const o=`\n    <!DOCTYPE html>\n    <div class="mermaid">\n      ${n}\n    </div>\n    <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"><\/script>\n    <script>\n      mermaid.initialize({ startOnLoad: true });\n    <\/script>\n  `;e.writeFileSync(t+"/erd.html",o)}(a,r),console.log("ERD created succesfully!")})();